{"version":3,"sources":["reportWebVitals.ts","constants.ts","api.ts","FilmPreview/FilmPreview.tsx","useFavoriteFilm.tsx","Films/Films.tsx","Film/Film.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","FILMS_URL","api","films","fetch","res","json","film","filmId","a","filmDTO","resources","planets","vehicles","starships","data","Promise","all","map","resource","FilmPreview","excerpt3","limitCharacters","text","opening_crawl","length","breakWord","more","key","localStorageKey","React","useState","localStorage","getItem","setData","removeItem","setItem","useFavoriteFilm","episode_id","toString","isFavorite","toggleIsFavorite","Col","xs","md","Card","border","style","width","className","Header","title","Body","Text","Link","href","Button","variant","Footer","onClick","Films","useQuery","isLoading","error","ProgressBar","animated","now","results","Container","Figure","Image","height","src","alt","Row","getNames","name","join","Film","useParams","Title","Badge","release_date","ListGroup","ListGroupItem","size","App","path","queryClient","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.ded2a643.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const FILMS_URL = 'https://swapi.dev/api/films'","import { FILMS_URL } from \"./constants\";\r\n\r\nexport const api = {\r\n    films: () => {\r\n        return fetch(FILMS_URL).then((res) => res.json());\r\n    },\r\n    film: (filmId: string) => async () => {\r\n        const filmDTO = await fetch(`${FILMS_URL}/${filmId}`).then((res) =>\r\n            res.json()\r\n        );\r\n        filmDTO.data = {\r\n            planets: await api.resources(filmDTO.planets),\r\n            vehicles: await api.resources(filmDTO.vehicles),\r\n            starships: await api.resources(filmDTO.starships),\r\n        };\r\n        return filmDTO;\r\n    },\r\n    resources: (resources: string[]) => {\r\n        return Promise.all(\r\n            resources.map((resource) => fetch(resource).then((res) => res.json()))\r\n        );\r\n    },\r\n};","import React from \"react\";\r\nimport Film from \"swapi-typescript/dist/models/Film\";\r\nimport { Card, Col, Button } from \"react-bootstrap\";\r\nimport limitCharacters from \"limit-characters\";\r\nimport { useFavoriteFilm } from \"../useFavoriteFilm\";\r\ninterface FilmPreviewProps {\r\n  data: Film;\r\n}\r\n\r\nexport const FilmPreview: React.FC<FilmPreviewProps> = ({ data }) => {\r\n  const excerpt3 = limitCharacters({\r\n    text: data.opening_crawl,\r\n    length: 200,\r\n    breakWord: false,\r\n    more: \"...\",\r\n  });\r\n\r\n  const [isFavorite, toggleIsFavorite] = useFavoriteFilm(\r\n    data.episode_id.toString()\r\n  );\r\n\r\n  return (\r\n    <Col xs={12} md={4}>\r\n      <Card border=\"dark\" style={{ width: \"18rem\" }} className=\"mb-4\">\r\n        <Card.Header className=\"font-weight-bold text-secondary text-uppercase\">\r\n          {data.title}\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Card.Text>{excerpt3} </Card.Text>\r\n          <Card.Link href={`/film/${data.episode_id}`}><Button className=\"mb-4\" variant=\"light\">Read More</Button></Card.Link>\r\n          <Card.Footer>\r\n            <Card.Link onClick={toggleIsFavorite}>\r\n              <Button className=\"pb-5 mb-5 pb-md-0 mb-md-0 mx-auto mx-md-0\" variant=\"light\"> {isFavorite ? \"Delete From Favorite\" : \"Add To Favorite\"} </Button>\r\n            </Card.Link>\r\n          </Card.Footer>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n\r\n","import React from 'react';\r\n\r\nexport const useFavoriteFilm = (key: string): [boolean, () => void] => {\r\n    const localStorageKey = `favoriteFilm_${key}`\r\n    const [data, setData] = React.useState(!!localStorage.getItem(localStorageKey))\r\n    const toggle = () => {\r\n        if (data) {\r\n            localStorage.removeItem(localStorageKey)\r\n        } else {\r\n            localStorage.setItem(localStorageKey, 'favorite')\r\n        }\r\n        setData(!data);\r\n    }\r\n    return [data, toggle]\r\n}","import React from 'react';\nimport { useQuery } from 'react-query';\nimport Film from 'swapi-typescript/dist/models/Film';\nimport { api } from '../api';\nimport { FilmPreview } from '../FilmPreview/FilmPreview';\nimport { Container, Row, ProgressBar, Figure } from 'react-bootstrap'\n\nexport const Films: React.FC = () => {\n\n  const { isLoading, error, data } = useQuery<unknown, unknown, { results: Film[] }>('films', api.films)\n  const BANNER = \"https://cdn.commonwealthclub.org/s3fs-public/styles/hero/public/2019-11/hero%20star%20wars.png?itok=waMDC-JL\"\n  if (isLoading) return <ProgressBar animated now={45} />\n\n  if (error) return <> 'An error has occurred: ' +  error.message </>\n\n  const films = data!.results\n\n  return (\n    <Container>\n      <Figure.Image width={250} height={180} src={BANNER} alt=\"banner\" />\n      <Row>\n        {films.map((film) => <FilmPreview key={film.episode_id} data={film} />)}\n      </Row>\n    </Container>)\n};\n","import React from 'react';\nimport { useQuery } from 'react-query';\nimport { useParams } from 'react-router-dom';\nimport FilmDTO from 'swapi-typescript/dist/models/Film';\nimport { api } from '../api';\nimport { Card, ListGroupItem, ListGroup, ProgressBar, Badge, Button } from 'react-bootstrap'\nimport Planet from 'swapi-typescript/dist/models/Planet';\nimport Vehicle from 'swapi-typescript/dist/models/Vehicle';\nimport Starship from 'swapi-typescript/dist/models/Starship';\n\nexport interface IFilm extends FilmDTO {\n  data: {\n    planets: Planet[]\n    vehicles: Vehicle[]\n    starships: Starship[]\n  }\n}\n\ntype IResource = Planet | Vehicle | Starship\n\nconst getNames = (resources: IResource[]) => resources.map(resource => resource.name).join(', ')\n\nexport const Film: React.FC = () => {\n  const { filmId } = useParams<Record<string, string | undefined>>()\n  const { isLoading, error, data: film } = useQuery<unknown, unknown, IFilm>(['film', filmId], api.film(filmId as string))\n\n  if (isLoading) return <ProgressBar animated now={45} />\n\n  if (error) return <>'An error has occurred: ' + error </>\n  return (\n\n    <Card >\n      <Card.Body>\n        <Card.Title><Badge variant=\"warning\">{film!.title}</Badge></Card.Title>\n        <Card.Text>\n          <Badge variant=\"light\">{film!.release_date}</Badge>\n        </Card.Text>\n      </Card.Body>\n      <ListGroup className=\"list-group-flush\">\n        <ListGroupItem><Badge variant=\"info\">Planets:</Badge> {getNames(film!.data.planets)}</ListGroupItem>\n        <ListGroupItem><Badge variant=\"info\">Vehicles:</Badge> {getNames(film!.data.vehicles)}</ListGroupItem>\n        <ListGroupItem><Badge variant=\"info\">Starships:</Badge> {getNames(film!.data.starships)}</ListGroupItem>\n      </ListGroup>\n      <Button variant=\"primary\" size=\"lg\" href=\"/\">Go Back</Button>\n    </Card>\n  )\n};","import React from 'react';\r\nimport { Films } from './Films/Films';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Film } from './Film/Film';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport const App: React.FC = () => {\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/film/:filmId\">\r\n          <Film />\r\n        </Route>\r\n        <Route path=\"/\" >\r\n          <Films />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport reportWebVitals from './reportWebVitals';\nimport { App } from './App';\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}